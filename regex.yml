- regex     : '; ?(.+)'
  replace   : '// $1'

- regex     : 'RETURN 0'
  replace   : 'return false;'

- regex     : 'RETURN 1'
  replace   : 'return true;'

- regex     : '\bASSIPLAY == 0'
  replace   : '!assiplay'

- regex     : '\bASSIPLAY == 1'
  replace   : 'assiplay'

- regex     : 'PLAYER'
  replace   : 'player'

- regex     : 'TARGET'
  replace   : 'target'

- regex     : 'ASSI'
  replace   : 'assi'

- regex     : 'MASTER'
  replace   : 'master'

- regex     : '\bSIF (.+)\n *(.+)'
  replace   : "if $1 { $2 }"

- regex     : '\bIF (.+)'
  replace   : "if $1 {"

- regex     : '\bELSEIF (.+)'
  replace   : "} else if $1 {"

- regex     : '\bELSE'
  replace   : "} else {"

- regex     : '\bENDIF'
  replace   : "}"

- regex     : '\bSOURCE:(\w+):(\w+)'
  replace   : "$1.source[Source::$2]"

- regex     : '\bBASE:(\w+):(\w+)'
  replace   : "$1.base[Base::$2].current"

- regex     : '\bMAXBASE:(\w+):(\w+)'
  replace   : "$1.base[Base::$2].max"

- regex     : '\bDOWNBASE:(\w+):(\w+)'
  replace   : "$1.down_base[Base::$2]"

- regex     : '\bTEQUIP:(\w+):(\w+)'
  replace   : "$1.tequip.contains(Tequip::$2)"

- regex     : '\bABL:(\w+):(\w+)'
  replace   : "$1.abl[Abl::$2]"

- regex     : '\bTALENT:(\w+):(\w+)'
  replace   : "$1.talent[Talent::$2]"

- regex     : '\bSTAIN:(\w+):(\w+) != (\d+)'
  replace   : "$1.stain[Stain::$2].is_disjoint(to_stain($3))"

- regex     : '\bSTAIN:(\w+):(\w+) (>?=|&) (\d+)'
  replace   : "$1.stain[Stain::$2].is_superset(to_stain($4))"

- regex     : '\bSTAIN:(\w+):(\w+) ([\|&\+-\^]?=) (\d+)'
  replace   : "$1.stain[Stain::$2] $3 to_stain($4);"

- regex     : '\bSOURCE:(\w+):(\w+) *([\+\*-/%]?=) SOURCE(\w+):(\w+)'
  replace   : "$1.source[Source::$2] $3 $4.source[Source::$5]"

- regex     : '\bTIMES (\w+)\.source\[Source::(\w+)\] *, *(\d+).(\d+)'
  replace   : "times_source($1, Source::$2, $3$4);"
